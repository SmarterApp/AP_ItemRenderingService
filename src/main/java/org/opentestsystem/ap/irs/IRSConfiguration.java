/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.irs;

import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.AmazonClient;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.gitlab.GitLabPreviewManager;
import org.opentestsystem.ap.common.itembank.IdGenerator;
import org.opentestsystem.ap.common.itembank.PreviewManager;
import org.opentestsystem.ap.common.itembank.preview.PreviewClient;
import org.opentestsystem.ap.common.itembank.preview.PreviewManagerImpl;
import org.opentestsystem.ap.common.itembank.preview.PreviewValidator;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.task.ItemCleanupTask;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;

/**
 * The configuration to use when syncing the data store to the item bank.
 */
@EnableScheduling
@Configuration
@ConditionalOnProperty(value = "itembank.enabled.preview", havingValue = "true")
public class IRSConfiguration {

    private final ItemBankProperties itemBankProperties;

    public IRSConfiguration(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    // ------------------------------------------------------------------------

    @Bean
    public AmazonClient amazonClient() {
        return new AmazonClient(itemBankProperties);
    }

    @Bean
    public DataStoreUtility dataStoreUtility() {
        return new DataStoreUtility();
    }

    @Bean
    public DataStoreAttachmentManager dataStoreAttachmentManager(AmazonClient amazonClient,
                                                                 DataStoreUtility dataStoreUtility) {
        return new DataStoreAttachmentManager(amazonClient, dataStoreUtility);
    }

    @Bean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository) {
        return new DataStoreDataManager(this.itemBankProperties, itemEntityRepository, workflowStatusRepository);
    }

    @Bean
    public GitLabItemManager gitLabManager(ItemRepository itemRepository) {
        return new GitLabItemManager(itemRepository);
    }

    @Bean
    public PreviewValidator previewValidator() {
        return new PreviewValidator();
    }

    @Bean
    public DataStorePreviewManager dataStorePreviewManager(DataStoreDataManager dataManager,
                                                           DataStoreAttachmentManager attachmentManager,
                                                           ItemRepository itemRepository) {
        return new DataStorePreviewManager(
            this.itemBankProperties,
            dataManager,
            attachmentManager,
            itemRepository
        );
    }

    @Bean
    public GitLabPreviewManager gitLabPreviewManager(ItemRepository itemRepository,
                                                     SecurityUtil securityUtil,
                                                     PreviewClient client,
                                                     IdGenerator idGenerator) {
        return new GitLabPreviewManager(itemRepository, securityUtil, client, idGenerator);
    }

    @Bean
    public PreviewClient previewClient() {
        return new PreviewClient(this.itemBankProperties);
    }

    @Bean
    public PreviewManager previewManager(PreviewValidator validator,
                                         DataStorePreviewManager dataStorePreviewManager,
                                         GitLabPreviewManager gitLabPreviewManager,
                                         PreviewClient previewClient) {
        return new PreviewManagerImpl(
            this.itemBankProperties,
            validator,
            dataStorePreviewManager,
            gitLabPreviewManager,
            previewClient
        );
    }

    @Bean
    public ItemCleanupTask ItemCleanupTask(TaskProperties taskProperties) {
        return new ItemCleanupTask(taskProperties, this.itemBankProperties);
    }
}
