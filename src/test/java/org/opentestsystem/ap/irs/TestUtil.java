package org.opentestsystem.ap.irs;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.model.admin.AuthenticatedUserModel;
import org.opentestsystem.ap.common.model.admin.PermissionModel;
import org.opentestsystem.ap.common.model.render.RenderResponse;
import org.opentestsystem.ap.common.security.model.ItemBankUser;
import org.opentestsystem.ap.common.security.model.User;
import org.opentestsystem.ap.common.security.model.UserBuilder;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE;
import static org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE;

/**
 * Created by alexponce on 7/3/17.
 */
@Slf4j
@Getter
public class TestUtil {

    private ItemFactory itemFactory = new ItemFactory();

    public static final String ITEM_BANK_USER_USER_NAME = "hal_jordan@fairwaytech.com";

    public static final String ITEM_BANK_USER_FIRST_NAME = "Hal";

    public static final String ITEM_BANK_USER_LAST_NAME = "Jordan";

    public static final ItemBankUser ITEM_BANK_USER = new ItemBankUser(
        ITEM_BANK_USER_USER_NAME,
        ITEM_BANK_USER_FIRST_NAME + " " + ITEM_BANK_USER_LAST_NAME);

    public static final String BANK_KEY = "200";

    public static final String ITEM_ID = "1234567890";

    public static final String HISTORY_ID = "1234567890";

    public static final String PROMPT = "This is a prompt";

    public static final String EXEMPLAR_RESPONSE_1 = "This is an exemplar response 1";

    public static final String EXEMPLAR_RESPONSE_2 = "This is an exemplar response 2";

    public static final String RENDER_HOST = "http://localhost:8200";

    public static final String RENDER_EXTERNAL_HOST = "http://localhost:8200";

    public static final String RENDER_URL = "http://localhost:8200/item/187-1711482705";

    public static final String LOCAL_BASE_DIR = "~/ItemBankIRS";

    public static final String SYSTEM_VERSION = "iat-42";

    private String gitlabHost = "https://gitlab-dev.smarterbalanced.org";

    private String gitlabUser = "test@fake.com";

    private String gitlabPass = "testPassword";

    private String gitlabGroup = "TestItembankGroup";

    private int idMinValue = 1000000000;

    private int idMaxValue = Integer.MAX_VALUE;

    public RenderResponse newRenderingServiceResponse() {
        RenderResponse renderingResponse = new RenderResponse();
        renderingResponse.setRenderUrl(RENDER_URL);
        return renderingResponse;
    }

    public ItemBankProperties newItemBankProperties() {
        ItemBankProperties p = new ItemBankProperties();
        p.getPreview().setHost("http://localhost:8200");
        p.getPreview().setExternalHost("http://localhost:8200");
        p.getPreview().setIvsBaseDir("ivs-base-dir");
        return p;
    }


    // ------------------------------------------------------------------------

    public User user() {
        return UserBuilder.builder()
            .model(this.authenticatedUser())
            .id(INTEGER_MINUS_ONE.toString())
            .username(EMPTY)
            .email(EMPTY)
            .firstName(EMPTY)
            .lastName(EMPTY)
            .fullName(EMPTY)
            .password("[PROTECTED]")
            .enabled(true)
            .credentialsNonExpired(true)
            .accountNonExpired(true)
            .accountNonLocked(false)
            .authorities(Collections.emptyList())
            .build();
    }

    public AuthenticatedUserModel authenticatedUser() {
        AuthenticatedUserModel user = new AuthenticatedUserModel();
        user.setId(1);
        user.setEmail(ITEM_BANK_USER_USER_NAME);
        user.setGivenName(ITEM_BANK_USER_FIRST_NAME);
        user.setSurname(ITEM_BANK_USER_LAST_NAME);
        user.setOrganizationName("test-org-name");
        user.setTag("test-tag");
        user.setPermissions(this.permissionModelList(1));
        return user;
    }

    public List<PermissionModel> permissionModelList(int count) {
        ArrayList<PermissionModel> list = new ArrayList<>(count);
        for(int i = 0; i < count; ++i) {
            list.add(this.permissionModel(i+i));
        }
        return list;
    }

    public PermissionModel permissionModel(int id) {
        PermissionModel permission = new PermissionModel();
        permission.setId(id);
        permission.setCode("permission-code-" + id);
        permission.setLabel("permission-label-" + id);
        permission.setWorkflowRestricted(true);
        permission.setDescription("permission-description");
        permission.setVersion(INTEGER_ONE);
        permission.setWorkflowStatusCodes(Arrays.asList("Draft", "Review"));
        return permission;
    }

}
