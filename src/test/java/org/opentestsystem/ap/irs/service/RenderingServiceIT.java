package org.opentestsystem.ap.irs.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.opentestsystem.ap.common.preview.PreviewManager;
import org.opentestsystem.ap.common.model.render.RenderResponse;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.irs.util.IRSTestUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static java.util.Collections.emptyList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.irs.util.IRSTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.irs.util.IRSTestUtil.ITEM_ID;


@RunWith(SpringRunner.class)
public class RenderingServiceIT {

    private IRSTestUtil irsTestUtil;

    @Autowired
    private RenderingService renderingService;

    @Autowired
    private PreviewManager previewManager;

    @Autowired
    private SecurityUtil securityUtil;

    @TestConfiguration
    static class ItemApiTestConfiguration {

        @Bean
        public SecurityUtil securityUtil() {
            return Mockito.mock(SecurityUtil.class);
        }

        @Bean
        public PreviewManager renderManager() {
            return Mockito.mock(PreviewManager.class);
        }

        @Bean
        public RenderingService renderingService(SecurityUtil securityUtil, PreviewManager renderManager) {
            return new RenderingService(securityUtil, renderManager);
        }
    }

    @Before
    public void setup() {
        irsTestUtil = new IRSTestUtil();
    }

    @Test
    public void itShouldRenderItemById() {
        final List EMPTY_ID_LIST = emptyList();

        RenderResponse expectedResponse = irsTestUtil.newRenderingServiceResponse();

        when(securityUtil.getItemBankUser()).thenReturn(ITEM_BANK_USER);

        when(previewManager.renderItem(ITEM_BANK_USER, ITEM_ID, EMPTY_ID_LIST)).thenReturn(expectedResponse);

        RenderResponse actualResponse = renderingService.renderItem(ITEM_ID, EMPTY_ID_LIST);
        assertThat(actualResponse).isEqualTo(expectedResponse);

        verify(previewManager, times(1)).renderItem(ITEM_BANK_USER, ITEM_ID, EMPTY_ID_LIST);
    }

    @Test
    public void itShouldRenderItemByHistoryId() {
        final List EMPTY_ID_LIST = emptyList();
        final String HISTORY_ID = "history-id";

        RenderResponse expectedResponse = irsTestUtil.newRenderingServiceResponse();

        when(securityUtil.getItemBankUser()).thenReturn(ITEM_BANK_USER);

        when(previewManager.renderItem(ITEM_BANK_USER, ITEM_ID, HISTORY_ID, EMPTY_ID_LIST))
            .thenReturn(expectedResponse);

        RenderResponse actualResponse = renderingService.renderItem(ITEM_ID, HISTORY_ID, EMPTY_ID_LIST);

        assertThat(actualResponse).isEqualTo(expectedResponse);
        verify(previewManager, times(1))
            .renderItem(ITEM_BANK_USER, ITEM_ID, HISTORY_ID, EMPTY_ID_LIST);
    }


}
