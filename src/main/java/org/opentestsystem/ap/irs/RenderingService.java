/*
 *  Copyright 2017-2018 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.irs;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.preview.PreviewData;
import org.opentestsystem.ap.common.model.render.RenderResponse;
import org.opentestsystem.ap.common.security.SecurityUtil;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;

/**
 * Item Rendering Service
 */
@Slf4j
@Service
public class RenderingService {

    private final RenderingManager renderingManager;

    public RenderingService(RenderingManager renderingManager) {
        this.renderingManager = renderingManager;
    }

    public RenderResponse renderItem(String itemId, List<String> associationIdList) {
        log.info("Rendering item {}", itemId);
        return renderingManager.renderItem(SecurityUtil.getItemBankUser(), itemId, associationIdList);
    }

    public RenderResponse renderItem(String itemId, String itemHistoryId, List<String> associationIdList) {
        log.info("Rendering item {} for history record {}", itemId, itemHistoryId);
        return renderingManager.renderHistoricItem(
            SecurityUtil.getItemBankUser(), itemId, itemHistoryId, associationIdList
        );
    }

    public PreviewData generatePreviewData(String itemId) {
        log.info("Generating preview for item {}", itemId);
        final PreviewData previewData = renderingManager.generatePreviewData(
            SecurityUtil.getItemBankUser(), itemId, Collections.emptyList()
        );
        log.info("Relative path {}", previewData.getPreviewDataRelativePath().toString());
        return previewData;
    }
}