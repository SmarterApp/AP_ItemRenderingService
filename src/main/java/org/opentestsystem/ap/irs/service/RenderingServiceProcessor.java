package org.opentestsystem.ap.irs.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.model.PreviewData;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.SaaifIdGenerator;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.irs.client.IvsClient;
import org.opentestsystem.ap.irs.model.RenderingServiceResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

import static org.apache.commons.collections4.CollectionUtils.isEmpty;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_STIM;

/**
 * Created by alexponce on 7/3/17.
 */
@Slf4j
@Component
public class RenderingServiceProcessor {

    private final ItemRepository itemRepository;

    private final SecurityUtil securityUtil;

    private final IvsClient ivsClient;

    private final SaaifIdGenerator saaifIdGenerator;

    @Autowired
    public RenderingServiceProcessor(final ItemRepository itemRepository,
                                     final SecurityUtil securityUtil,
                                     final IvsClient client,
                                     final SaaifIdGenerator saaifIdGenerator) {
        this.itemRepository = itemRepository;
        this.securityUtil = securityUtil;
        this.ivsClient = client;
        this.saaifIdGenerator = saaifIdGenerator;
    }

    public RenderingServiceResponse renderItem(String itemId, String itemHistoryId, List<String> associationIdList) {
        final RenderingServiceResponse response = new RenderingServiceResponse();
        try {
            final ItemBankUser user = securityUtil.getItemBankUser();
            final String randomBankKey = saaifIdGenerator.generateTransactionId();

            PreviewData previewData = itemRepository.cloneItemForPreview(user, itemId, itemHistoryId, randomBankKey);

            if (TYPE_STIM.equals(previewData.getItemType())) {
                if (CollectionUtils.isNotEmpty(associationIdList)) {
                    associationIdList.forEach(associationId -> {
                        itemRepository.cloneItemForPreview(user, associationId, null, randomBankKey);
                    });
                } else {
                    previewData = itemRepository.cloneNewItemForStimulusPreview(
                        previewData.getRepositoryPath(), previewData.getItemId(), randomBankKey);
                }
            } else {
                if (previewData.getStimulusId() != null) {
                    itemRepository.cloneItemForPreview(user, previewData.getStimulusId(), null, randomBankKey);
                }
                if (previewData.getTutorialId() != null) {
                    itemRepository.cloneItemForPreview(user, previewData.getTutorialId(), null, randomBankKey);
                }
            }

            if (isEmpty(associationIdList)) {
                response.setRenderUrl(ivsClient.getRenderUrl(randomBankKey, randomBankKey, previewData.getItemId()));
            } else {
                response.setRenderUrl(ivsClient.getRenderUrl(randomBankKey, randomBankKey, associationIdList));
            }

        } catch (Exception ex) {
            log.error("Render Item operation failed.", ex);
            throw (ex);
        }
        return response;
    }
}
