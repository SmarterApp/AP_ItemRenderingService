package org.opentestsystem.ap.irs.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.opentestsystem.ap.irs.model.RenderingServiceResponse;
import org.opentestsystem.ap.irs.util.IRSTestUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.irs.util.IRSTestUtil.HISTORY_ID;
import static org.opentestsystem.ap.irs.util.IRSTestUtil.ITEM_ID;

/**
 * Created by alexponce on 7/3/17.
 */
@RunWith(SpringRunner.class)
public class RenderingServiceIT {

    private IRSTestUtil irsTestUtil;

    @Autowired
    private RenderingService renderingService;

    @Autowired
    private RenderingServiceValidator mockServiceValidator;

    @Autowired
    private RenderingServiceProcessor mockServiceProcessor;

    @TestConfiguration
    static class ItemApiTestConfiguration {

        @Bean
        public RenderingServiceValidator renderingServiceValidator() {
            return Mockito.mock(RenderingServiceValidator.class);
        }

        @Bean
        public RenderingServiceProcessor renderingServiceProcessor() {
            return Mockito.mock(RenderingServiceProcessor.class);
        }

        @Bean
        public RenderingService renderingService(RenderingServiceValidator serviceValidator,
                                                 RenderingServiceProcessor serviceProcessor) {
            return new RenderingService(serviceValidator, serviceProcessor);
        }
    }

    @Before
    public void setup() {
        irsTestUtil = new IRSTestUtil();
    }

    @Test
    public void itShouldRenderItemById() {
        final RenderingServiceResponse expectedResponse = irsTestUtil.newRenderingServiceResponse();

        when(mockServiceProcessor.renderItem(ITEM_ID, null, Collections.emptyList())).thenReturn(expectedResponse);

        final RenderingServiceResponse actualResponse = renderingService.renderItem(ITEM_ID, Collections.emptyList());

        assertThat(actualResponse).isEqualTo(expectedResponse);

        verify(mockServiceValidator, times(1)).validateRenderItemById(ITEM_ID);
    }

    @Test
    public void itShouldRenderItemByHistoryId() {
        final RenderingServiceResponse expectedResponse = irsTestUtil.newRenderingServiceResponse();

        when(mockServiceProcessor.renderItem(ITEM_ID, HISTORY_ID, Collections.emptyList()))
            .thenReturn(expectedResponse);

        final RenderingServiceResponse actualResponse = renderingService
            .renderItem(ITEM_ID, HISTORY_ID, Collections.emptyList());

        assertThat(actualResponse).isEqualTo(expectedResponse);

        verify(mockServiceValidator, times(1)).validateRenderItemByHistoryId(ITEM_ID, HISTORY_ID);
    }


}
