package org.opentestsystem.ap.irs.rest.v1;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.opentestsystem.ap.irs.model.RenderingServiceResponse;
import org.opentestsystem.ap.irs.service.RenderingService;
import org.opentestsystem.ap.irs.service.RenderingServiceProcessor;
import org.opentestsystem.ap.irs.service.RenderingServiceValidator;
import org.opentestsystem.ap.irs.util.IRSTestUtil;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.ap.irs.util.IRSTestUtil.ITEM_ID;

/**
 * Created by alexponce on 7/3/17.
 */
@ActiveProfiles(value = "it-test")
@RunWith(SpringRunner.class)
@WebMvcTest(ItemApi.class)
public class ItemApiTest {

    private IRSTestUtil irsTestUtil;

    private RenderingService renderingService;

    @Mock
    private RenderingServiceValidator mockServiceValidator;

    @Mock
    private RenderingServiceProcessor mockServiceProcessor;

    @Before
    public void setup(){
        irsTestUtil = new IRSTestUtil();

        renderingService = new RenderingService(mockServiceValidator,
                mockServiceProcessor);
    }

    @Test
    public void itShouldRenderItem() throws Exception {
        final RenderingServiceResponse expectedResponse = irsTestUtil.newRenderingServiceResponse();

        when(mockServiceProcessor.renderItem(ITEM_ID)).thenReturn(expectedResponse);

        final RenderingServiceResponse actualResponse = renderingService.renderItem(ITEM_ID);

        assertThat(actualResponse).isEqualTo(expectedResponse);

        verify(mockServiceValidator, times(1)).validateRenderItem(ITEM_ID);
    }
}
