package org.opentestsystem.ap.irs.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Charsets;
import com.google.common.io.Resources;
import org.apache.commons.codec.binary.Base64;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;

import org.opentestsystem.ap.irs.config.RestTemplateConfig;
import org.opentestsystem.ap.irs.model.HtmlRenderingServiceRequest;
import org.opentestsystem.ap.irs.model.HtmlRenderingServiceRequestItem;
import org.opentestsystem.ap.irs.model.IvsReloadResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.http.converter.xml.MarshallingHttpMessageConverter;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Arrays;

import org.opentestsystem.ap.irs.model.HtmlRenderingServiceResponse;

/**s
 * Created by alexponce on 4/5/17.
 */
@Service("htmlRenderingService")
public class HtmlRenderingServiceImpl implements HtmlRenderingService {

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private ObjectMapper objectMapper;

//    @Override
//    public HtmlRenderingServiceResponse getIrisItemContent(String Id) {
//
//        // RestTemplate restTemplate = new RestTemplate();
//        // RestTemplate restTemplate = getPooledRestTemplate();
//        // RestTemplate restTemplate = new RestTemplate(new HttpComponentsClientHttpRequestFactory());
//        // RestTemplate restTemplate = new RestTemplate(getClientHttpRequestFactory();
//
//        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
//        restTemplate.getMessageConverters().add(new MarshallingHttpMessageConverter());
//        restTemplate.getMessageConverters().add(new StringHttpMessageConverter());
//
//        HttpHeaders headers = new HttpHeaders();
//        headers.setContentType(MediaType.APPLICATION_JSON);
//        headers.setAccept(Arrays.asList(MediaType.APPLICATION_XML));
//
//        String url = "http://localhost:8080/iris/Pages/API/content/load?id=2B3C34BF-064C-462A-93EA-41E9E3EB8333";
//
//        //String url = "https://tds-stage.smarterbalanced.org/iris//Pages/API/content/load?id=2B3C34BF-064C-462A-93EA-41E9E3EB8333";
//
//        HtmlRenderingServiceRequestItem item = new HtmlRenderingServiceRequestItem("Test","I-187-2061");
//        HtmlRenderingServiceRequest items = new HtmlRenderingServiceRequest(new HtmlRenderingServiceRequestItem[] {item});
//
//        //String requestJson = "{\"items\":[{\"response\":\"<p>TESTING</p>\",\"id\":\"I-187-2061\"}]}";
//
//        String sampleBody;
//        try {
//             sampleBody = objectMapper.writeValueAsString(items);
//        }
//        catch (Exception ex) {
//
//        }
//
//        HttpEntity<HtmlRenderingServiceRequest> request = new HttpEntity<>(items, headers);
//
//        //ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, request, String.class);
//        //ResponseEntity<Object> response = restTemplate.postForEntity(url,request, Object.class);
//
//        ResponseEntity<Void> response = restTemplate.exchange(url,HttpMethod.POST, request, Void.class);
//
//        HtmlRenderingServiceResponse htmlResponse = new HtmlRenderingServiceResponse();
//
//        //Void body = response.getBody();
//
//        htmlResponse.setSuccess(true);
//        //htmlResponse.setRenderedHtml();
//
//        return htmlResponse;
//
//    }

    @Override
    public HtmlRenderingServiceResponse getMockItemContent(String Id) {
        HtmlRenderingServiceResponse htmlResponse = new HtmlRenderingServiceResponse();
        htmlResponse.setSuccess(true);
        try {
            htmlResponse.setRenderedHtml(
                    Resources.toString(Resources.getResource("item.xml"), Charsets.UTF_8));
        }
        catch (IOException ex) {

        }
        return htmlResponse;
    }

    @Override
    public HtmlRenderingServiceResponse getIvsItemContent(String Id) {

        RestTemplate restTemplate = getPooledRestTemplate();

        String ivsUrl = "http://localhost:8200";
        String ivsReloadUrl = ivsUrl + "/Pages/API/content/reload";
        String ivsItemUrl = ivsUrl + "/item/" + Id;

        HtmlRenderingServiceResponse htmlResponse = new HtmlRenderingServiceResponse();

        IvsReloadResponse ivsReloadResponse = restTemplate.getForObject(ivsReloadUrl, IvsReloadResponse.class);

        if (ivsReloadResponse.getReplyCode() == 0) {
            ResponseEntity<String> response = restTemplate.exchange(ivsItemUrl, HttpMethod.GET, null, String.class);
            htmlResponse.setSuccess(true);
            htmlResponse.setRenderedHtml(response.getBody());
        } else {
            htmlResponse.setSuccess(false);
            htmlResponse.setMessage(ivsReloadUrl + " operation failed");
        }

        return htmlResponse;
    }

    private RestTemplate getPooledRestTemplate() {
        PoolingHttpClientConnectionManager manager = new PoolingHttpClientConnectionManager();
        manager.setDefaultMaxPerRoute(5);
        manager.setMaxTotal(5);
        HttpClient client = HttpClients.createMinimal(manager);
        return new RestTemplate(new HttpComponentsClientHttpRequestFactory(client));
    }


    private HttpHeaders createHeaders(String username, String password){
        return new HttpHeaders() {{
            String auth = username + ":" + password;
            byte[] encodedAuth = Base64.encodeBase64(
                    auth.getBytes(Charset.forName("US-ASCII")) );
            String authHeader = "Basic " + new String( encodedAuth );
            set( "Authorization", authHeader );
        }};
    }

    private ClientHttpRequestFactory getClientHttpRequestFactory() {
        int timeout = 5000;
        HttpComponentsClientHttpRequestFactory clientHttpRequestFactory
                = new HttpComponentsClientHttpRequestFactory(createHttpClient());
        clientHttpRequestFactory.setConnectTimeout(timeout);
        //clientHttpRequestFactory.setBufferRequestBody(true);
        return clientHttpRequestFactory;
    }

    private CloseableHttpClient createHttpClient() {
        return HttpClients.custom().setRetryHandler((exception, executionCount, context) -> {
            if (executionCount > 3) {
                //LOGGER.warn("Maximum tries reached for client http pool ");
                return false;
            }
            if (exception instanceof org.apache.http.NoHttpResponseException) {
                //LOGGER.warn("No response from server on " + executionCount + " call");
                return true;
            }
            return false;
        }).build();
    }
}
