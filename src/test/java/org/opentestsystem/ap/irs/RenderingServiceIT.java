package org.opentestsystem.ap.irs;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.opentestsystem.ap.common.model.render.RenderResponse;
import org.opentestsystem.ap.common.security.SecurityUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static java.util.Collections.emptyList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.irs.TestUtil.ITEM_ID;


@RunWith(SpringRunner.class)
public class RenderingServiceIT {

    private TestUtil testUtil;

    private Authentication authentication;

    @Autowired
    private RenderingService renderingService;

    @Autowired
    private RenderingManager renderingManager;

    @TestConfiguration
    static class ItemApiTestConfiguration {

        @Bean
        public RenderingManager renderManager() {
            return Mockito.mock(RenderingManager.class);
        }

        @Bean
        public RenderingService renderingService(RenderingManager renderManager) {
            return new RenderingService(renderManager);
        }
    }

    @Before
    public void setup() {
        testUtil = new TestUtil();
        authentication = Mockito.mock(Authentication.class);
        when(authentication.getPrincipal()).thenReturn(testUtil.user());
        SecurityContextHolder.getContext().setAuthentication(authentication);
    }

    @After
    public void tearDown() {
        SecurityContextHolder.clearContext();
    }

    @Test
    public void itShouldRenderItemById() {
        final List EMPTY_ID_LIST = emptyList();

        RenderResponse expectedResponse = testUtil.newRenderingServiceResponse();

        when(renderingManager.renderItem(
            SecurityUtil.getItemBankUser(), ITEM_ID, EMPTY_ID_LIST)).thenReturn(expectedResponse);

        RenderResponse actualResponse = renderingService.renderItem(ITEM_ID, EMPTY_ID_LIST);
        assertThat(actualResponse).isEqualTo(expectedResponse);

        verify(renderingManager, times(1)).renderItem(
            SecurityUtil.getItemBankUser(), ITEM_ID, EMPTY_ID_LIST);
    }

    @Test
    public void itShouldRenderItemByHistoryId() {
        final List EMPTY_ID_LIST = emptyList();
        final String HISTORY_ID = "history-id";

        RenderResponse expectedResponse = testUtil.newRenderingServiceResponse();

        when(renderingManager.renderHistoricItem(SecurityUtil.getItemBankUser(), ITEM_ID, HISTORY_ID, EMPTY_ID_LIST))
            .thenReturn(expectedResponse);

        RenderResponse actualResponse = renderingService.renderItem(ITEM_ID, HISTORY_ID, EMPTY_ID_LIST);

        assertThat(actualResponse).isEqualTo(expectedResponse);
        verify(renderingManager, times(1))
            .renderHistoricItem(SecurityUtil.getItemBankUser(), ITEM_ID, HISTORY_ID, EMPTY_ID_LIST);
    }


}
