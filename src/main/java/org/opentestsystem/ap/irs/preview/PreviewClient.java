/*
 * Copyright 2017 Regents of the University of California. Licensed under the Educational Community License, Version  2.0 (the "license"); you may not use this file except in compliance with the License. You may obtain a copy of the license at
 *
 * https://opensource.org/licenses/ECL-2.0
 *
 * Unless required under applicable law or agreed to in writing, software distributed under the License is distributed in an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for specific language governing permissions and limitations under the license.
 */

package org.opentestsystem.ap.irs.preview;

import org.opentestsystem.ap.common.config.ItemBankProperties;

import java.nio.file.Path;
import java.util.List;
import java.util.function.Function;

import static java.util.stream.Collectors.toList;

/**
 * The render client is the Item Viewer Service (IVS).  This class generates URLs to IVS where it will render
 * the item in a browser.
 */
public class PreviewClient {

    private final ItemBankProperties.PreviewProps previewProps;

    public PreviewClient(ItemBankProperties itemBankProps) {
        previewProps = itemBankProps.getPreview();
    }

    public String getRenderUrl(Path previewRoot, String bankKey, String itemId) {
        return getRenderUrl(previewRoot.toString(), bankKey, itemId);
    }

    public String getRenderUrl(Path previewRoot, String bankKey, List<String> itemIdList) {
        return getRenderUrl(previewRoot.toString(), bankKey, itemIdList);
    }

    /**
     * Generates a URL to the item viewer service.
     * <p>
     * Example: http://localhost:8200/item/187-205684
     *
     * @param itemDirectory The folder IVS should look in for the items.
     * @param bankKey       The bank key associated with the items.
     * @param itemId        The item to represent in the URL.
     * @return A URL to the item view service.
     */
    public String getRenderUrl(String itemDirectory, String bankKey, String itemId) {
        return String.format("%s%s/%s-%s?loadFrom=%s/%s",
            previewProps.getExternalHost(),
            previewProps.getItemMapping(),
            bankKey,
            itemId,
            previewProps.getInternalContentDir(),
            itemDirectory);
    }

    /**
     * Generates a URL to the item viewer service.  The URL generated is referred to as "loading a performance task
     * item" in the IVS docs.
     * <p>
     * Example: http://localhost:8200/items?ids=187-100001,187-200002&loadFrom=/home/tomcat7/content/187
     * <p>
     * The key to the URL is the 'ids' query parameter where it lists multiple items.
     *
     * @param itemDirectory The folder IVS should look in for the items.
     * @param bankKey       The bank key associated with the items.
     * @param itemIdList    The list of items to represent in the URL.
     * @return A URL to the item view service.
     */
    public String getRenderUrl(String itemDirectory, String bankKey, List<String> itemIdList) {
        String urlPattern = previewProps.getPerformanceTaskItemUrlPattern();
        String idsQueryParamValue = generateIdString(bankKey, itemIdList);
        String loadFromQueryParamValue = previewProps.getInternalContentDir() + '/' + itemDirectory;
        return String.format(urlPattern, previewProps.getExternalHost(), idsQueryParamValue, loadFromQueryParamValue);
    }

    /**
     * Generates a comma separated string.  The values in the generated string are the values in the 'ids' list with the
     * bnankkey prefixed to it.  The format is bankkey-id.  For example 187-100001.
     * <p>
     * An example result is "187-100001,187-200002"
     *
     * @param bankKey The bank key to prefix the ids with.
     * @param ids     The ids to be prefixed.
     * @return A comma separated string.
     */
    public String generateIdString(String bankKey, List<String> ids) {
        Function<String, String> appendBankKey = id -> String.format("%s-%s", bankKey, id);
        List<String> newIds = ids.stream().map(appendBankKey).collect(toList());
        return String.join(",", newIds);
    }
}
