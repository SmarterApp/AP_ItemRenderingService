package org.opentestsystem.ap.irs;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.datastore.preview.DataStorePreviewManager;
import org.opentestsystem.ap.common.model.preview.PreviewData;
import org.opentestsystem.ap.common.model.render.RenderResponse;
import org.opentestsystem.ap.common.security.model.ItemBankUser;
import org.opentestsystem.ap.common.util.StopWatchLogger;
import org.springframework.stereotype.Component;

import java.util.List;

import static org.apache.commons.collections4.CollectionUtils.isEmpty;

/**
 * IRS is the primary, and probably only, user of this manager.
 */
@Slf4j
@Component
public class RenderingManager {

    private final RenderingValidator validator;

    private final DataStorePreviewManager dataStorePreviewManager;

    private final RenderClient renderClient;

    public RenderingManager(RenderingValidator validator,
                            DataStorePreviewManager dataStorePreviewManager,
                            RenderClient renderClient) {
        this.validator = validator;
        this.dataStorePreviewManager = dataStorePreviewManager;
        this.renderClient = renderClient;
    }

    // ------------------------------------------------------------------------

    public RenderResponse renderItem(ItemBankUser user, String itemId, List<String> associationIdList) {
        log.info("Render item {}", itemId);
        StopWatchLogger watch = StopWatchLogger.start();
        PreviewData pd = this.generatePreviewData(user, itemId, associationIdList);
        RenderResponse renderResponse = toRenderResponse(pd);
        watch.stop(log, "renderItem");
        return renderResponse;
    }

    public PreviewData generatePreviewData(ItemBankUser user, String itemId, List<String> associationIdList) {
        log.info("Generate preview data {}", itemId);
        StopWatchLogger watch = StopWatchLogger.start();
        this.validator.validate(itemId);
        PreviewData pd = this.dataStorePreviewManager.generatePreviewData(user, itemId);
        PreviewData previewData = this.dataStorePreviewManager.generateAssociatedPreviewData(pd, associationIdList);
        watch.stop(log, "generatePreviewData");
        return previewData;
    }

    // ------------------------------------------------------------------------

    public RenderResponse renderHistoricItem(ItemBankUser user, String itemId, String historyId, List<String> associationIdList) {
        log.info("Render item {} for history record {}", itemId, historyId);
        StopWatchLogger watch = StopWatchLogger.start();
        PreviewData pd = this.generateHistoricPreviewData(user, itemId, historyId, associationIdList);
        RenderResponse renderResponse = toRenderResponse(pd);
        watch.stop(log, "renderItem (for history)");
        return renderResponse;
    }

    public PreviewData generateHistoricPreviewData(ItemBankUser user, String itemId, String historyId, List<String> associationIdList) {
        log.info("Generate preview data {} for history record {}", itemId, historyId);
        StopWatchLogger watch = StopWatchLogger.start();
        this.validator.validate(itemId, historyId);
        PreviewData pd = this.dataStorePreviewManager.generateHistoricPreviewData(user, itemId, historyId);
        PreviewData previewData = this.dataStorePreviewManager.generateAssociatedPreviewData(pd, associationIdList);
        watch.stop(log, "generatePreviewData (for history)");
        return previewData;
    }

    // ------------------------------------------------------------------------

    private RenderResponse toRenderResponse(PreviewData pd) {
        RenderResponse response = new RenderResponse();
        if (isEmpty(pd.getAssociationIdList())) {
            response.setRenderUrl(
                renderClient.getRenderUrl(pd.getPreviewDataRelativePath(), pd.getBankKey(), pd.getItemId()));
        } else {
            response.setRenderUrl(
                renderClient
                    .getRenderUrl(pd.getPreviewDataRelativePath(), pd.getBankKey(), pd.getAssociationIdList()));
        }
        return response;
    }
}
