/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.irs;


import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.AsyncDataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStorePreviewManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.AmazonClient;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.gitlab.GitLabPreviewManager;
import org.opentestsystem.ap.common.itembank.IdGenerator;
import org.opentestsystem.ap.common.preview.PreviewClient;
import org.opentestsystem.ap.common.preview.PreviewManager;
import org.opentestsystem.ap.common.preview.PreviewValidator;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.task.ItemCleanupTask;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;

/**
 * The configuration to use when syncing the data store to the item bank.
 */
@EnableScheduling
@Configuration
@Import(StatusConfiguration.class)
public class IRSConfiguration {

    private final ItemBankProperties itemBankProperties;

    @Value("${irs.async.executor.poolSize:5}")
    private int asyncExecutorPoolSize;

    public IRSConfiguration(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    // ------------------------------------------------------------------------

    @Bean
    public Executor asyncExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(this.asyncExecutorPoolSize);
        executor.setMaxPoolSize(this.asyncExecutorPoolSize);
        executor.setThreadNamePrefix("Preview-");
        return executor;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public AmazonClient amazonClient() {
        return new AmazonClient(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreUtility dataStoreUtility() {
        return new DataStoreUtility();
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreAttachmentManager dataStoreAttachmentManager(AmazonClient amazonClient,
                                                                 DataStoreUtility dataStoreUtility) {
        return new DataStoreAttachmentManager(amazonClient, dataStoreUtility);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository,
                                                     WorkflowStatusTransitionRepository workflowStatusTransitionRepository) {
        return new DataStoreDataManager(
                this.itemBankProperties,
                itemEntityRepository,
                workflowStatusRepository,
                workflowStatusTransitionRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public GitLabItemManager gitLabManager(ItemRepository itemRepository) {
        return new GitLabItemManager(this.itemBankProperties, itemRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public PreviewValidator previewValidator() {
        return new PreviewValidator();
    }

    @Bean
    @ConditionalOnMissingBean
    public AsyncDataStorePreviewManager asyncDataStorePreviewManager(DataStoreDataManager dataManager,
                                                                     DataStoreAttachmentManager attachmentManager,
                                                                     ItemRepository itemRepository) {
        return new AsyncDataStorePreviewManager(
                this.itemBankProperties,
                dataManager,
                attachmentManager,
                itemRepository
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStorePreviewManager dataStorePreviewManager(DataStoreDataManager dataManager,
                                                           DataStoreAttachmentManager attachmentManager,
                                                           ItemRepository itemRepository,
                                                           AsyncDataStorePreviewManager asyncDataStorePreviewManager) {
        return new DataStorePreviewManager(
                this.itemBankProperties, dataManager, attachmentManager, itemRepository, asyncDataStorePreviewManager);
    }

    @Bean
    @ConditionalOnMissingBean
    public GitLabPreviewManager gitLabPreviewManager(ItemRepository itemRepository, IdGenerator idGenerator) {
        return new GitLabPreviewManager(itemRepository, idGenerator);
    }

    @Bean
    @ConditionalOnMissingBean
    public PreviewClient previewClient() {
        return new PreviewClient(this.itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public PreviewManager previewManager(PreviewValidator validator,
                                         DataStorePreviewManager dataStorePreviewManager,
                                         GitLabPreviewManager gitLabPreviewManager,
                                         PreviewClient previewClient) {
        return new PreviewManager(validator, dataStorePreviewManager, gitLabPreviewManager, previewClient);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemCleanupTask itemCleanupTask(TaskProperties taskProperties) {
        return new ItemCleanupTask(taskProperties, this.itemBankProperties);
    }
}
