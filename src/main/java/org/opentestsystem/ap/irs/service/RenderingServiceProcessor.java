package org.opentestsystem.ap.irs.service;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.PreviewData;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.SaaifIdGenerator;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.irs.client.IvsClient;
import org.opentestsystem.ap.irs.model.RenderingServiceResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * Created by alexponce on 7/3/17.
 */
@Slf4j
@Component
public class RenderingServiceProcessor {

    private final ItemRepository itemRepository;

    private final SecurityUtil securityUtil;

    private final IvsClient ivsClient;

    private final SaaifIdGenerator saaifIdGenerator;

    @Autowired
    public RenderingServiceProcessor(final ItemRepository itemRepository,
                                     final SecurityUtil securityUtil,
                                     final IvsClient client,
                                     final SaaifIdGenerator saaifIdGenerator) {
        this.itemRepository = itemRepository;
        this.securityUtil = securityUtil;
        this.ivsClient = client;
        this.saaifIdGenerator = saaifIdGenerator;
    }

    public RenderingServiceResponse renderItem(String itemId, String itemHistoryId) {
        RenderingServiceResponse response = new RenderingServiceResponse();
        try {
            final ItemBankUser user = securityUtil.getItemBankUser();
            final String randomBankKey = saaifIdGenerator.generateTransactionId();

            PreviewData itemPD = itemRepository.cloneItemForPreview(user, itemId, itemHistoryId, randomBankKey);

            if (itemPD.getItemType() != null && itemPD.getItemType().equals(ItemConstants.ItemType.TYPE_STIM)) {
                itemPD = itemRepository.cloneNewItemForStimulusPreview(
                        itemPD.getRepositoryPath(), itemPD.getItemId(), randomBankKey);
            } else {
                if (itemPD.getStimulusId() != null) {
                    itemRepository.cloneItemForPreview(user, itemPD.getStimulusId(), null, randomBankKey);
                }
                if (itemPD.getTutorialId() != null) {
                    itemRepository.cloneItemForPreview(user, itemPD.getTutorialId(), null, randomBankKey);
                }
            }

            response.setRenderUrl(ivsClient.getRenderUrl(randomBankKey, randomBankKey, itemPD.getItemId()));
        } catch (Exception ex) {
            log.error("Render Item operation failed.", ex);
            throw (ex);
        }
        return response;
    }
}
