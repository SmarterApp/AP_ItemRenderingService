package org.opentestsystem.ap.irs.service;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.irs.client.IvsClient;
import org.opentestsystem.ap.irs.model.RenderingServiceResponse;
import org.opentestsystem.ap.irs.util.ItemUtil;
import org.opentestsystem.ap.irs.util.RepositoryFileUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.nio.file.Path;

/**
 * Created by alexponce on 7/3/17.
 */
@Slf4j
@Component
public class RenderingServiceProcessor {

    private final ItemRepository itemRepository;

    private final SecurityUtil securityUtil;

    private final IvsClient ivsClient;

    private final RepositoryFileUtil repositoryFileUtil;

    @Autowired
    public RenderingServiceProcessor(final ItemRepository itemRepository,
                                     final SecurityUtil securityUtil,
                                     final IvsClient client,
                                     final RepositoryFileUtil repositoryUtil) {
        this.itemRepository = itemRepository;
        this.securityUtil = securityUtil;
        this.ivsClient = client;
        this.repositoryFileUtil = repositoryUtil;
    }

    public RenderingServiceResponse renderItem(String itemId) {
        RenderingServiceResponse response = new RenderingServiceResponse();
        try {
            final ItemBankUser user = securityUtil.getItemBankUser();
            final Item item = itemRepository.findItem(user, itemId);
            //
            String stimulusId = ItemUtil.getStimulusId(item);
            if (stimulusId != null) {
                cloneAndCopyRepository(user, stimulusId);
            }
            cloneAndCopyRepository(user, itemId);
            if (ivsClient.reloadItems()) {
                response.setRenderUrl(ivsClient.getRenderUrl(itemId));
            }
        } catch (Exception ex) {
            log.error("Render Item operation failed.", ex);
            throw (ex);
        }
        return response;
    }

    private void cloneAndCopyRepository(final ItemBankUser user, final String itemId) {
        final Path stimPath = itemRepository.cloneItem(user, itemId);
        repositoryFileUtil.copyRepositoryToRenderDir(stimPath, itemId);
    }
}
