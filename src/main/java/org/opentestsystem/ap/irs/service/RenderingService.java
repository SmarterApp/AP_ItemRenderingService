/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.irs.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.util.SecurityUtil;
import org.opentestsystem.ap.irs.client.IvsClient;
import org.opentestsystem.ap.irs.model.RenderingServiceResponse;
import org.opentestsystem.ap.irs.util.ItemUtil;
import org.opentestsystem.ap.irs.util.RepositoryFileUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.nio.file.Path;

/**
 * Item Rendering Service
 */
@Slf4j
@Component
public class RenderingService {

    private final ItemRepository itemRepository;

    private final RenderingServiceValidator renderingServiceValidator;

    private final SecurityUtil securityUtil;

    private final IvsClient ivsClient;

    private final RepositoryFileUtil repositoryFileUtil;

    private final ItemUtil itemUtil;

    @Autowired
    public RenderingService(final ItemRepository itemRepository,
                            final RenderingServiceValidator validator,
                            final SecurityUtil securityUtil,
                            final IvsClient client,
                            final RepositoryFileUtil repoUtil,
                            final ItemUtil itemUtil) {
        this.itemRepository = itemRepository;
        this.renderingServiceValidator = validator;
        this.securityUtil = securityUtil;
        this.ivsClient = client;
        this.repositoryFileUtil = repoUtil;
        this.itemUtil = itemUtil;
    }

    public RenderingServiceResponse renderItem(final String itemId) {
        log.debug("render item {}", itemId);
        renderingServiceValidator.validateRenderItem(itemId);

        RenderingServiceResponse response = new RenderingServiceResponse();

        try {
            // Get item

            final ItemBankUser user = securityUtil.getItemBankUser();
            final Item item = itemRepository.findItem(user, itemId);
            String stimulusId = itemUtil.getStimulusId(item);
            if (stimulusId != null) {
                Path stimPath = itemRepository.cloneItem(user, stimulusId);
                repositoryFileUtil.copyRepositoryToRenderDir(stimPath, stimulusId);
            }
            // Clone item
            Path itemPath = itemRepository.cloneItem(user, itemId);
            // TODO: Item Rendering Service securely copies the item bank directory and files to IVS
            // Copy cloned item files to IVS data directory
            repositoryFileUtil.copyRepositoryToRenderDir(itemPath, itemId);
            // Call IVS Reload endpoint
            if (ivsClient.reloadItems()) {
                // Return payload
                response.setRenderUrl(ivsClient.getRenderUrl(itemId));
            }
        } catch (Exception ex) {
            log.error("Render Item operation failed.", ex);
            throw (ex);
        }

        return response;
    }

}
