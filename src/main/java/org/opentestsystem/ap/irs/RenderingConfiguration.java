/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.irs;


import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.config.DatabaseConfiguration;
import org.opentestsystem.ap.common.config.FreemarkerConfig;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.config.JwtWebSecurityConfiguration;
import org.opentestsystem.ap.common.config.ObjectMapperConfiguration;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreSaaifContentGenerator;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.preview.DataStorePreviewManager;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.model.JsonModelAssembler;
import org.opentestsystem.ap.common.restclient.HistoryClient;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.SaaifWordListAssembler;
import org.opentestsystem.ap.common.saaif.StringAssembler;
import org.opentestsystem.ap.common.saaif.item.AssociatedStimulusSupplier;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.common.task.ItemCleanupTask;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.ap.common.util.ImageGenerator;
import org.opentestsystem.ap.common.util.WirisImageGenerator;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;

/**
 * The configuration to use when syncing the data store to the item bank.
 */
@Slf4j
@Configuration
@Import({
    DatabaseConfiguration.class,
    FreemarkerConfig.class,
    JwtWebSecurityConfiguration.class,
    ObjectMapperConfiguration.class,
    StatusConfiguration.class
})
@EnableConfigurationProperties({ItemBankProperties.class, TaskProperties.class})
public class RenderingConfiguration {

    private final ItemBankProperties itemBankProperties;

    private final RestTemplateBuilder restTemplateBuilder;

    private final freemarker.template.Configuration freemarker;

    private final DataStoreDataManager dataStoreDataManager;

    private final DataStoreAttachmentManager dataStoreAttachmentManager;

    private final DataStoreUtility dataStoreUtility;

    private final HistoryClient historyClient;

    @Value("${irs.async.executor.poolSize:5}")
    private int asyncExecutorPoolSize;

    public RenderingConfiguration(ItemBankProperties itemBankProperties,
                                  RestTemplateBuilder restTemplateBuilder,
                                  freemarker.template.Configuration freemarker,
                                  DataStoreDataManager dataStoreDataManager,
                                  DataStoreAttachmentManager dataStoreAttachmentManager,
                                  DataStoreUtility dataStoreUtility,
                                  HistoryClient historyClient) {
        this.itemBankProperties = itemBankProperties;
        this.restTemplateBuilder = restTemplateBuilder;
        this.freemarker = freemarker;
        this.dataStoreDataManager = dataStoreDataManager;
        this.dataStoreAttachmentManager = dataStoreAttachmentManager;
        this.dataStoreUtility = dataStoreUtility;
        this.historyClient = historyClient;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public ImageGenerator imageGenerator() {
        log.info("Creating bean imageGenerator");
        return new WirisImageGenerator(itemBankProperties, restTemplateBuilder);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemFactory itemFactory() {
        log.info("Creating bean itemFactory");
        return new ItemFactory();
    }

    @Bean
    @ConditionalOnMissingBean
    public JsonModelAssembler jsonModelAssembler() {
        log.info("Creating bean jsonModelAssembler");
        return new JsonModelAssembler();
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public StringAssembler stringAssembler() {
        log.info("Creating bean stringAssembler");
        return new StringAssembler(this.freemarker);
    }


    @Bean
    @ConditionalOnMissingBean
    public SaaifAssembler saaifAssembler() {
        log.info("Creating bean saaifAssembler");
        return new SaaifAssembler(saaifMetadataAssembler(), saaifWordListAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifMetadataAssembler saaifMetadataAssembler() {
        log.info("Creating bean saaifMetadataAssembler");
        return new SaaifMetadataAssembler();
    }


    @Bean
    @ConditionalOnMissingBean
    public SaaifWordListAssembler saaifWordListAssembler() {
        log.info("Creating bean saaifWordListAssembler");
        return new SaaifWordListAssembler();
    }

    // ------------------------------------------------------------------------

    @Bean
    public Executor asyncExecutor() {
        log.info("Creating bean asyncExecutor");
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(this.asyncExecutorPoolSize);
        executor.setMaxPoolSize(this.asyncExecutorPoolSize);
        executor.setThreadNamePrefix("Preview-");
        return executor;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public DataStoreSaaifContentGenerator dataStoreSaaifContentGenerator() {
        log.info("Creating bean dataStoreContentGenerator");
        return new DataStoreSaaifContentGenerator(
            this.itemBankProperties,
            appAssembler(),
            dataStoreAttachmentManager,
            transformerFactory(),
            imageGenerator());
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStorePreviewManager dataStorePreviewManager() {
        log.info("Creating bean dataStorePreviewManager");
        return new DataStorePreviewManager(
            this.itemBankProperties,
            this.dataStoreDataManager,
            dataStoreSaaifContentGenerator(),
            itemFactory());
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemCleanupTask itemCleanupTask(TaskProperties taskProperties) {
        log.info("Creating bean itemCleanupTask");
        return new ItemCleanupTask(taskProperties, this.itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public AppAssembler appAssembler() {
        log.info("Creating bean appAssembler");
        return new AppAssembler(saaifAssembler(), jsonModelAssembler(), stringAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public AssociatedStimulusSupplier associatedStimulusSupplier() {
        log.info("Creating bean associatedStimulusSupplier");
        return new AssociatedStimulusSupplier(this.dataStoreDataManager);
    }

    @Bean
    @ConditionalOnMissingBean
    public TransformerFactory transformerFactory() {
        log.info("Creating bean transformerFactory");
        return new TransformerFactory(associatedStimulusSupplier());
    }
}
